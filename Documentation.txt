
Guarantees of the Pi type-checker:
 1. Succ terms can only have subterms that are Succ, Zero, or Variable
 
 
Guarantees of the PiProcess typechecker:
 1. Input channels are either Name or Var Pi types.
 2. Input always store the message in a Var type.
 3. Output channels are either Name or Var Pi types.
 4. Let Bindings bind to variables, and the right hand sided is a Pair or a variable
 5. Case statements compare only numeric Pi types or variables.
 6. CaseDecrypt happens on Encrypted Pi type or variable.
 7. CaseDecrypt stores the result of decryption in a variable.
 
 
 Fixes:
     1. Variable substitution recursively searches pairs for vars.
 
Extensions:
  1. 
 
Extra Features: 
  1. Fancy printing of Pi/PiProcess terms--as similar to specification as plaintext allows.
  2. Highly descriptive type error messages.
  3. Integration with Blank Canvas visualization complete with variable replacement.
  
Documentation Discussion:
      Execution of a protocol written in the Spi calculus has unique challenges from that of a 
      classical deep embedding--mainly that it involves parallel reduction of processes that exhibit
      communication. Yet at the same time, processes need to have a non-shared state for themselves (variable substitution).
      To achieve this ends, the reduction computation is done inside a State Transformer (inner monad IO).
      
      
      There is a problem with this implementation as written. Let us look at the following example. Say we 
      have a protocol where 'A' sends a message to 'B' and 'B' sends back 2 of whatever it receives. So say 'A'
      sends "Hello," then 'B' would send "HelloHello" back to 'A'. We could write this protocol easily enough:
      
      examplewhyBroken_a = Output (Name "C_ab") (Name "Hello") 
                          (Input (Name "C_ab") (Var "x") (Value (Var "x")))  
                          
      examplewhyBroken_b = Input (Name "C_ab") (Var "x") 
                          (Output (Name "C_ab") (Pair (Var "x") (Var "x")) 
                           Nil)
      inst_broken = Restriction (Name "C_ab") (Composition examplewhyBroken_a examplewhyBroken_b)
      
      When we run this protocol, it will not behave as expected. 'A' and 'B' are running in parallel. 'A' sends
      "Hello" on the channel. But 'B' never gets a chance to be heard! 'A', after sending "Hello" is instantly waiting
      for something to be on that channel. And by golly, there is (it's what 'A' just put there!). So 'A' "hears itself"
      on channel "C_ab" instead of hearing B's response.
      
      There are a couple different ways we could fix this. The first way that came to my mind was if we just make sure to
      only use channels unidirectionally instead of bidirectionally. In a way this 'solves the issue,' but at what cost? We are no longer 
      true to the Spi Calculus. Clearly 'A' and 'B' communicate bidirectionally on the same channel as seen in many-a-protocol.
      Well then perhaps we could use unidirectional channels underneath. This would require a sort of self awareness--somehow we would 
      have to know that I am 'A' sending a message or 'B' sending a message (how else would you know what unidirectional channel to use?).
      If we do not want to use unidirectional channels underneath, we could use the same idea to instead make sure you don't read a message from
      a channel that you put there yourself. In the example above, 'A' wouldn't read in the message "Hello" becasue 'A' was the one who put it there.
      Instead it would wait for a message from someone else. Either approach (unidirectional channels underneath or not reading your messages) does
      not completely solve the issue. What if we modify the example above so that B sends another message "Have a nice day Mr. A!" :
      
      examplewhyBroken_a' = Output (Name "C_ab") (Name "Hello") 
                    (Input (Name "C_ba") (Var "x") 
                    (Input (Name "C_ba") (Var "y")
                    (Value (Pair (Var "x") (Var "y"))))) 
                    
      examplewhyBroken_b' = Input (Name "C_ab") (Var "x") 
                    (Output (Name "C_ba") (Pair (Var "x") (Var "x"))
                    (Output (Name "C_ba") (Name "Have a nice day Mr. A!")
                     Nil))
      inst_broken' = Restriction (Name "C_ab") (Composition examplewhyBroken_a' examplewhyBroken_b')
      
      Notice that now 'A' has 2 inputs and 'B' has 2 outputs. 